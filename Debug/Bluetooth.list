
Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800406c  0800406c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004074  08004074  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004074  08004074  00014074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004078  08004078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800407c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000014  08004090  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08004090  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015363  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d33  00000000  00000000  000353a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  000380e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00039138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292c1  00000000  00000000  0003a070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156ca  00000000  00000000  00063331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f20b3  00000000  00000000  000789fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016aaae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c0  00000000  00000000  0016ab00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800400c 	.word	0x0800400c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800400c 	.word	0x0800400c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <HCI_TL_SPI_Init+0x88>)
 80004d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d8:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <HCI_TL_SPI_Init+0x88>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e0:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <HCI_TL_SPI_Init+0x88>)
 80004e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80004ec:	2301      	movs	r3, #1
 80004ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	4619      	mov	r1, r3
 8000500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000504:	f000 fd6a 	bl	8000fdc <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800050c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050e:	2301      	movs	r3, #1
 8000510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000516:	2300      	movs	r3, #0
 8000518:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800051a:	f107 030c 	add.w	r3, r7, #12
 800051e:	4619      	mov	r1, r3
 8000520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000524:	f000 fd5a 	bl	8000fdc <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000528:	2302      	movs	r3, #2
 800052a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4619      	mov	r1, r3
 800053e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000542:	f000 fd4b 	bl	8000fdc <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8000546:	f000 fa33 	bl	80009b0 <BSP_SPI1_Init>
 800054a:	4603      	mov	r3, r0
}
 800054c:	4618      	mov	r0, r3
 800054e:	3720      	adds	r7, #32
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40021000 	.word	0x40021000

08000558 <PER_APP_Init_BLE>:
uint8_t PERIPHERAL_BDADDR[] = { 0x55, 0x11, 0x07, 0x01, 0x16, 0xE2 };



APP_Status PER_APP_Init_BLE(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af04      	add	r7, sp, #16
  uint8_t ret = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	71fb      	strb	r3, [r7, #7]
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, PERIPHERAL_BDADDR);
 8000562:	4a22      	ldr	r2, [pc, #136]	; (80005ec <PER_APP_Init_BLE+0x94>)
 8000564:	2106      	movs	r1, #6
 8000566:	2000      	movs	r0, #0
 8000568:	f003 f975 	bl	8003856 <aci_hal_write_config_data>
 800056c:	4603      	mov	r3, r0
 800056e:	71fb      	strb	r3, [r7, #7]

  if (ret != BLE_STATUS_SUCCESS)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <PER_APP_Init_BLE+0x22>
  {
    return APP_ERROR;
 8000576:	2310      	movs	r3, #16
 8000578:	e034      	b.n	80005e4 <PER_APP_Init_BLE+0x8c>
  }

  aci_hal_set_tx_power_level(1, 4);
 800057a:	2104      	movs	r1, #4
 800057c:	2001      	movs	r0, #1
 800057e:	f003 f9f5 	bl	800396c <aci_hal_set_tx_power_level>

  /* GATT Init */
  ret = aci_gatt_init();
 8000582:	f003 f945 	bl	8003810 <aci_gatt_init>
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <PER_APP_Init_BLE+0x3c>
  {
    return APP_ERROR;
 8000590:	2310      	movs	r3, #16
 8000592:	e027      	b.n	80005e4 <PER_APP_Init_BLE+0x8c>
  }

  /* GAP Init */
  ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000594:	1d3a      	adds	r2, r7, #4
 8000596:	463b      	mov	r3, r7
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	1cbb      	adds	r3, r7, #2
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	4613      	mov	r3, r2
 80005a0:	2207      	movs	r2, #7
 80005a2:	2100      	movs	r1, #0
 80005a4:	2001      	movs	r0, #1
 80005a6:	f003 f88c 	bl	80036c2 <aci_gap_init_IDB05A1>
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <PER_APP_Init_BLE+0x60>
  {
    return APP_ERROR;
 80005b4:	2310      	movs	r3, #16
 80005b6:	e015      	b.n	80005e4 <PER_APP_Init_BLE+0x8c>
  }

  /* Set auth requirement*/

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED, OOB_AUTH_DATA_ABSENT, NULL, 7, 16, USE_FIXED_PIN_FOR_PAIRING, 123456, BONDING);
 80005b8:	2301      	movs	r3, #1
 80005ba:	9303      	str	r3, [sp, #12]
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <PER_APP_Init_BLE+0x98>)
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	2300      	movs	r3, #0
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2310      	movs	r3, #16
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2307      	movs	r3, #7
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2001      	movs	r0, #1
 80005d0:	f003 f8c7 	bl	8003762 <aci_gap_set_auth_requirement>
 80005d4:	4603      	mov	r3, r0
 80005d6:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <PER_APP_Init_BLE+0x8a>
  {
	 return APP_ERROR;
 80005de:	2310      	movs	r3, #16
 80005e0:	e000      	b.n	80005e4 <PER_APP_Init_BLE+0x8c>
  }
  //aci_gap_set_authentication_requirement(MITM_PROTECTION_REQUIRED, OOB_AUTH_DATA_ABSENT, NULL, 7, 16, USE_FIXED_PIN_FOR_PAIRING, 123456, BONDING);

  return APP_SUCCESS;
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000000 	.word	0x20000000
 80005f0:	0001e240 	.word	0x0001e240

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 faf2 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f814 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f894 	bl	800072c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000604:	f000 f862 	bl	80006cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize GPIO Pin for SPI, Initialize SPI --> Trasfer Layer */
  if(HCI_TL_SPI_Init(NULL) != BSP_ERROR_NONE)
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff ff5f 	bl	80004cc <HCI_TL_SPI_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <main+0x24>
  {
	  Error_Handler();
 8000614:	f000 f908 	bl	8000828 <Error_Handler>
  }

  if(PER_APP_Init_BLE() != APP_SUCCESS)
 8000618:	f7ff ff9e 	bl	8000558 <PER_APP_Init_BLE>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <main+0x32>
  {
	  Error_Handler();
 8000622:	f000 f901 	bl	8000828 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	e7fe      	b.n	8000626 <main+0x32>

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b096      	sub	sp, #88	; 0x58
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2244      	movs	r2, #68	; 0x44
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fce0 	bl	8003ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800064a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800064e:	f000 fe95 	bl	800137c <HAL_PWREx_ControlVoltageScaling>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000658:	f000 f8e6 	bl	8000828 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000664:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000666:	2310      	movs	r3, #16
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066e:	2302      	movs	r3, #2
 8000670:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000676:	230a      	movs	r3, #10
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800067a:	2307      	movs	r3, #7
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fecc 	bl	8001428 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000696:	f000 f8c7 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2303      	movs	r3, #3
 80006a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	2104      	movs	r1, #4
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fa94 	bl	8001be0 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006be:	f000 f8b3 	bl	8000828 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3758      	adds	r7, #88	; 0x58
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_USART2_UART_Init+0x58>)
 80006d2:	4a15      	ldr	r2, [pc, #84]	; (8000728 <MX_USART2_UART_Init+0x5c>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_USART2_UART_Init+0x58>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART2_UART_Init+0x58>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART2_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART2_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART2_UART_Init+0x58>)
 8000710:	f002 fb21 	bl	8002d56 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800071a:	f000 f885 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000038 	.word	0x20000038
 8000728:	40004400 	.word	0x40004400

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b37      	ldr	r3, [pc, #220]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a36      	ldr	r2, [pc, #216]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <MX_GPIO_Init+0xf4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a30      	ldr	r2, [pc, #192]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a2a      	ldr	r2, [pc, #168]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b25      	ldr	r3, [pc, #148]	; (8000820 <MX_GPIO_Init+0xf4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a24      	ldr	r2, [pc, #144]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b22      	ldr	r3, [pc, #136]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CSN_Pin|LD2_Pin|BL_RST_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 7191 	mov.w	r1, #290	; 0x122
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f000 fdc0 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4817      	ldr	r0, [pc, #92]	; (8000824 <MX_GPIO_Init+0xf8>)
 80007c8:	f000 fc08 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : BL_IRQ_Pin */
  GPIO_InitStruct.Pin = BL_IRQ_Pin;
 80007cc:	2301      	movs	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BL_IRQ_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e4:	f000 fbfa 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CSN_Pin LD2_Pin BL_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|LD2_Pin|BL_RST_Pin;
 80007e8:	f44f 7391 	mov.w	r3, #290	; 0x122
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f000 fbea 	bl	8000fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	2006      	movs	r0, #6
 800080e:	f000 fb3e 	bl	8000e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000812:	2006      	movs	r0, #6
 8000814:	f000 fb57 	bl	8000ec6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	; 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	48000800 	.word	0x48000800

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <HAL_MspInit+0x44>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6613      	str	r3, [r2, #96]	; 0x60
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_MspInit+0x44>)
 8000848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x44>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6593      	str	r3, [r2, #88]	; 0x58
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x44>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b0ac      	sub	sp, #176	; 0xb0
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2288      	movs	r2, #136	; 0x88
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f003 fbad 	bl	8003ffc <memset>
  if(huart->Instance==USART2)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a21      	ldr	r2, [pc, #132]	; (800092c <HAL_UART_MspInit+0xb0>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d13b      	bne.n	8000924 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fbb5 	bl	8002028 <HAL_RCCEx_PeriphCLKConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008c4:	f7ff ffb0 	bl	8000828 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <HAL_UART_MspInit+0xb4>)
 80008ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008cc:	4a18      	ldr	r2, [pc, #96]	; (8000930 <HAL_UART_MspInit+0xb4>)
 80008ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d2:	6593      	str	r3, [r2, #88]	; 0x58
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <HAL_UART_MspInit+0xb4>)
 80008d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <HAL_UART_MspInit+0xb4>)
 80008e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e4:	4a12      	ldr	r2, [pc, #72]	; (8000930 <HAL_UART_MspInit+0xb4>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_UART_MspInit+0xb4>)
 80008ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008f8:	230c      	movs	r3, #12
 80008fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000910:	2307      	movs	r3, #7
 8000912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f000 fb5c 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	37b0      	adds	r7, #176	; 0xb0
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40004400 	.word	0x40004400
 8000930:	40021000 	.word	0x40021000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f98a 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <EXTI0_IRQHandler+0x10>)
 800098e:	f000 faf5 	bl	8000f7c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000030 	.word	0x20000030

0800099c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <SPI1_IRQHandler+0x10>)
 80009a2:	f002 f8ab 	bl	8002afc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000bc 	.word	0x200000bc

080009b0 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <BSP_SPI1_Init+0x54>)
 80009bc:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <BSP_SPI1_Init+0x58>)
 80009be:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <BSP_SPI1_Init+0x5c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	4911      	ldr	r1, [pc, #68]	; (8000a0c <BSP_SPI1_Init+0x5c>)
 80009c8:	600a      	str	r2, [r1, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d114      	bne.n	80009f8 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <BSP_SPI1_Init+0x54>)
 80009d0:	f002 f99e 	bl	8002d10 <HAL_SPI_GetState>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10e      	bne.n	80009f8 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <BSP_SPI1_Init+0x54>)
 80009dc:	f000 f85a 	bl	8000a94 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d108      	bne.n	80009f8 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <BSP_SPI1_Init+0x54>)
 80009e8:	f000 f812 	bl	8000a10 <MX_SPI1_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80009f2:	f06f 0307 	mvn.w	r3, #7
 80009f6:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80009f8:	687b      	ldr	r3, [r7, #4]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200000bc 	.word	0x200000bc
 8000a08:	40013000 	.word	0x40013000
 8000a0c:	20000120 	.word	0x20000120

08000a10 <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <MX_SPI1_Init+0x80>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a28:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a36:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2220      	movs	r2, #32
 8000a50:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2207      	movs	r2, #7
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2208      	movs	r2, #8
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f001 ff92 	bl	80029a0 <HAL_SPI_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40013000 	.word	0x40013000

08000a94 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a9c:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <SPI1_MspInit+0xcc>)
 8000a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa0:	4a2f      	ldr	r2, [pc, #188]	; (8000b60 <SPI1_MspInit+0xcc>)
 8000aa2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa6:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa8:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <SPI1_MspInit+0xcc>)
 8000aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <SPI1_MspInit+0xcc>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab8:	4a29      	ldr	r2, [pc, #164]	; (8000b60 <SPI1_MspInit+0xcc>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac0:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <SPI1_MspInit+0xcc>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <SPI1_MspInit+0xcc>)
 8000ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad0:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <SPI1_MspInit+0xcc>)
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <SPI1_MspInit+0xcc>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000ae4:	2340      	movs	r3, #64	; 0x40
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000af4:	2305      	movs	r3, #5
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f000 fa6b 	bl	8000fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000b16:	2305      	movs	r3, #5
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f000 fa5a 	bl	8000fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000b38:	2305      	movs	r3, #5
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4808      	ldr	r0, [pc, #32]	; (8000b64 <SPI1_MspInit+0xd0>)
 8000b44:	f000 fa4a 	bl	8000fdc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2023      	movs	r0, #35	; 0x23
 8000b4e:	f000 f99e 	bl	8000e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b52:	2023      	movs	r0, #35	; 0x23
 8000b54:	f000 f9b7 	bl	8000ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	; 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48000400 	.word	0x48000400

08000b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b90:	f7ff ffea 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	; (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f003 f9ed 	bl	8003f98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bbe:	f7ff fd19 	bl	80005f4 <main>

08000bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000bd0:	0800407c 	.word	0x0800407c
  ldr r2, =_sbss
 8000bd4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000bd8:	20000158 	.word	0x20000158

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_Init+0x3c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <HAL_Init+0x3c>)
 8000bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f000 f93e 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 f80f 	bl	8000c20 <HAL_InitTick>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	e001      	b.n	8000c12 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c0e:	f7ff fe11 	bl	8000834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c12:	79fb      	ldrb	r3, [r7, #7]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40022000 	.word	0x40022000

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <HAL_InitTick+0x6c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d023      	beq.n	8000c7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <HAL_InitTick+0x70>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_InitTick+0x6c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f949 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10f      	bne.n	8000c76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d809      	bhi.n	8000c70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f000 f913 	bl	8000e8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_InitTick+0x74>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e007      	b.n	8000c80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e004      	b.n	8000c80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	e001      	b.n	8000c80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000010 	.word	0x20000010
 8000c90:	20000008 	.word	0x20000008
 8000c94:	2000000c 	.word	0x2000000c

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000010 	.word	0x20000010
 8000cbc:	20000124 	.word	0x20000124

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000124 	.word	0x20000124

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e44:	d301      	bcc.n	8000e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00f      	b.n	8000e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <SysTick_Config+0x40>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	210f      	movs	r1, #15
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f7ff ff8e 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SysTick_Config+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SysTick_Config+0x40>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff29 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea0:	f7ff ff3e 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000ea4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	6978      	ldr	r0, [r7, #20]
 8000eac:	f7ff ff8e 	bl	8000dcc <NVIC_EncodePriority>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff5d 	bl	8000d78 <__NVIC_SetPriority>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff31 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffa2 	bl	8000e34 <SysTick_Config>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d005      	beq.n	8000f1e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2204      	movs	r2, #4
 8000f16:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e029      	b.n	8000f72 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 020e 	bic.w	r2, r2, #14
 8000f2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0201 	bic.w	r2, r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f003 021c 	and.w	r2, r3, #28
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	4798      	blx	r3
    }
  }
  return status;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	0c1b      	lsrs	r3, r3, #16
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	2201      	movs	r2, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	015a      	lsls	r2, r3, #5
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_EXTI_IRQHandler+0x5c>)
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d009      	beq.n	8000fce <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	4798      	blx	r3
    }
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40010414 	.word	0x40010414

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e17f      	b.n	80012ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 8171 	beq.w	80012e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <HAL_GPIO_Init+0x40>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d130      	bne.n	800107e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	091b      	lsrs	r3, r3, #4
 8001068:	f003 0201 	and.w	r2, r3, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b03      	cmp	r3, #3
 8001088:	d118      	bne.n	80010bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001090:	2201      	movs	r2, #1
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	f003 0201 	and.w	r2, r3, #1
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d017      	beq.n	80010f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d123      	bne.n	800114c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	6939      	ldr	r1, [r7, #16]
 8001148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0203 	and.w	r2, r3, #3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80ac 	beq.w	80012e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b5f      	ldr	r3, [pc, #380]	; (800130c <HAL_GPIO_Init+0x330>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	4a5e      	ldr	r2, [pc, #376]	; (800130c <HAL_GPIO_Init+0x330>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6613      	str	r3, [r2, #96]	; 0x60
 800119a:	4b5c      	ldr	r3, [pc, #368]	; (800130c <HAL_GPIO_Init+0x330>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a6:	4a5a      	ldr	r2, [pc, #360]	; (8001310 <HAL_GPIO_Init+0x334>)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011d0:	d025      	beq.n	800121e <HAL_GPIO_Init+0x242>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4f      	ldr	r2, [pc, #316]	; (8001314 <HAL_GPIO_Init+0x338>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d01f      	beq.n	800121a <HAL_GPIO_Init+0x23e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4e      	ldr	r2, [pc, #312]	; (8001318 <HAL_GPIO_Init+0x33c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d019      	beq.n	8001216 <HAL_GPIO_Init+0x23a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4d      	ldr	r2, [pc, #308]	; (800131c <HAL_GPIO_Init+0x340>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x236>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <HAL_GPIO_Init+0x344>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x232>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4b      	ldr	r2, [pc, #300]	; (8001324 <HAL_GPIO_Init+0x348>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x22e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4a      	ldr	r2, [pc, #296]	; (8001328 <HAL_GPIO_Init+0x34c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x22a>
 8001202:	2306      	movs	r3, #6
 8001204:	e00c      	b.n	8001220 <HAL_GPIO_Init+0x244>
 8001206:	2307      	movs	r3, #7
 8001208:	e00a      	b.n	8001220 <HAL_GPIO_Init+0x244>
 800120a:	2305      	movs	r3, #5
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x244>
 800120e:	2304      	movs	r3, #4
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x244>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x244>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x244>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x244>
 800121e:	2300      	movs	r3, #0
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001230:	4937      	ldr	r1, [pc, #220]	; (8001310 <HAL_GPIO_Init+0x334>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800123e:	4b3b      	ldr	r3, [pc, #236]	; (800132c <HAL_GPIO_Init+0x350>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001262:	4a32      	ldr	r2, [pc, #200]	; (800132c <HAL_GPIO_Init+0x350>)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001268:	4b30      	ldr	r3, [pc, #192]	; (800132c <HAL_GPIO_Init+0x350>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800128c:	4a27      	ldr	r2, [pc, #156]	; (800132c <HAL_GPIO_Init+0x350>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <HAL_GPIO_Init+0x350>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012b6:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_GPIO_Init+0x350>)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_GPIO_Init+0x350>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <HAL_GPIO_Init+0x350>)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa22 f303 	lsr.w	r3, r2, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f47f ae78 	bne.w	8000fec <HAL_GPIO_Init+0x10>
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	371c      	adds	r7, #28
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000
 8001314:	48000400 	.word	0x48000400
 8001318:	48000800 	.word	0x48000800
 800131c:	48000c00 	.word	0x48000c00
 8001320:	48001000 	.word	0x48001000
 8001324:	48001400 	.word	0x48001400
 8001328:	48001800 	.word	0x48001800
 800132c:	40010400 	.word	0x40010400

08001330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
 800133c:	4613      	mov	r3, r2
 800133e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800134c:	e002      	b.n	8001354 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <HAL_PWREx_GetVoltageRange+0x18>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40007000 	.word	0x40007000

0800137c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800138a:	d130      	bne.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001398:	d038      	beq.n	800140c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2232      	movs	r2, #50	; 0x32
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9b      	lsrs	r3, r3, #18
 80013bc:	3301      	adds	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c0:	e002      	b.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d4:	d102      	bne.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f2      	bne.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e8:	d110      	bne.n	800140c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e00f      	b.n	800140e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fa:	d007      	beq.n	800140c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001404:	4a05      	ldr	r2, [pc, #20]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40007000 	.word	0x40007000
 8001420:	20000008 	.word	0x20000008
 8001424:	431bde83 	.word	0x431bde83

08001428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e3ca      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800143a:	4b97      	ldr	r3, [pc, #604]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001444:	4b94      	ldr	r3, [pc, #592]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 80e4 	beq.w	8001624 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d007      	beq.n	8001472 <HAL_RCC_OscConfig+0x4a>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b0c      	cmp	r3, #12
 8001466:	f040 808b 	bne.w	8001580 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2b01      	cmp	r3, #1
 800146e:	f040 8087 	bne.w	8001580 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001472:	4b89      	ldr	r3, [pc, #548]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_RCC_OscConfig+0x62>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e3a2      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1a      	ldr	r2, [r3, #32]
 800148e:	4b82      	ldr	r3, [pc, #520]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d004      	beq.n	80014a4 <HAL_RCC_OscConfig+0x7c>
 800149a:	4b7f      	ldr	r3, [pc, #508]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a2:	e005      	b.n	80014b0 <HAL_RCC_OscConfig+0x88>
 80014a4:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d223      	bcs.n	80014fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fd55 	bl	8001f68 <RCC_SetFlashLatencyFromMSIRange>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e383      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c8:	4b73      	ldr	r3, [pc, #460]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a72      	ldr	r2, [pc, #456]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014ce:	f043 0308 	orr.w	r3, r3, #8
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b70      	ldr	r3, [pc, #448]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	496d      	ldr	r1, [pc, #436]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e6:	4b6c      	ldr	r3, [pc, #432]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	4968      	ldr	r1, [pc, #416]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
 80014fa:	e025      	b.n	8001548 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014fc:	4b66      	ldr	r3, [pc, #408]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a65      	ldr	r2, [pc, #404]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b63      	ldr	r3, [pc, #396]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4960      	ldr	r1, [pc, #384]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800151a:	4b5f      	ldr	r3, [pc, #380]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	495b      	ldr	r1, [pc, #364]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d109      	bne.n	8001548 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fd15 	bl	8001f68 <RCC_SetFlashLatencyFromMSIRange>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e343      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001548:	f000 fc4a 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 800154c:	4602      	mov	r2, r0
 800154e:	4b52      	ldr	r3, [pc, #328]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	4950      	ldr	r1, [pc, #320]	; (800169c <HAL_RCC_OscConfig+0x274>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	4a4e      	ldr	r2, [pc, #312]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001566:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001568:	4b4e      	ldr	r3, [pc, #312]	; (80016a4 <HAL_RCC_OscConfig+0x27c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fb57 	bl	8000c20 <HAL_InitTick>
 8001572:	4603      	mov	r3, r0
 8001574:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d052      	beq.n	8001622 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	e327      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d032      	beq.n	80015ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001588:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a42      	ldr	r2, [pc, #264]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001594:	f7ff fb94 	bl	8000cc0 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800159c:	f7ff fb90 	bl	8000cc0 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e310      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ae:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a36      	ldr	r2, [pc, #216]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4931      	ldr	r1, [pc, #196]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d8:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	492c      	ldr	r1, [pc, #176]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
 80015ec:	e01a      	b.n	8001624 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a29      	ldr	r2, [pc, #164]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fb61 	bl	8000cc0 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001602:	f7ff fb5d 	bl	8000cc0 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e2dd      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x1da>
 8001620:	e000      	b.n	8001624 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001622:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d074      	beq.n	800171a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b08      	cmp	r3, #8
 8001634:	d005      	beq.n	8001642 <HAL_RCC_OscConfig+0x21a>
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b0c      	cmp	r3, #12
 800163a:	d10e      	bne.n	800165a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d10b      	bne.n	800165a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d064      	beq.n	8001718 <HAL_RCC_OscConfig+0x2f0>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d160      	bne.n	8001718 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e2ba      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x24a>
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800166a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e026      	b.n	80016c0 <HAL_RCC_OscConfig+0x298>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800167a:	d115      	bne.n	80016a8 <HAL_RCC_OscConfig+0x280>
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a02      	ldr	r2, [pc, #8]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 800168e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	e014      	b.n	80016c0 <HAL_RCC_OscConfig+0x298>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	08004024 	.word	0x08004024
 80016a0:	20000008 	.word	0x20000008
 80016a4:	2000000c 	.word	0x2000000c
 80016a8:	4ba0      	ldr	r3, [pc, #640]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a9f      	ldr	r2, [pc, #636]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80016ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b9d      	ldr	r3, [pc, #628]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a9c      	ldr	r2, [pc, #624]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80016ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fafa 	bl	8000cc0 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff faf6 	bl	8000cc0 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e276      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e2:	4b92      	ldr	r3, [pc, #584]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x2a8>
 80016ee:	e014      	b.n	800171a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fae6 	bl	8000cc0 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fae2 	bl	8000cc0 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e262      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170a:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2d0>
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d060      	beq.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d005      	beq.n	8001738 <HAL_RCC_OscConfig+0x310>
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2b0c      	cmp	r3, #12
 8001730:	d119      	bne.n	8001766 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d116      	bne.n	8001766 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001738:	4b7c      	ldr	r3, [pc, #496]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_OscConfig+0x328>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e23f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	4b76      	ldr	r3, [pc, #472]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	061b      	lsls	r3, r3, #24
 800175e:	4973      	ldr	r1, [pc, #460]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001764:	e040      	b.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d023      	beq.n	80017b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800176e:	4b6f      	ldr	r3, [pc, #444]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a6e      	ldr	r2, [pc, #440]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff faa1 	bl	8000cc0 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001782:	f7ff fa9d 	bl	8000cc0 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e21d      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001794:	4b65      	ldr	r3, [pc, #404]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	4b62      	ldr	r3, [pc, #392]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	495f      	ldr	r1, [pc, #380]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
 80017b4:	e018      	b.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b6:	4b5d      	ldr	r3, [pc, #372]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a5c      	ldr	r2, [pc, #368]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80017bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff fa7d 	bl	8000cc0 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff fa79 	bl	8000cc0 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e1f9      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d03c      	beq.n	800186e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01c      	beq.n	8001836 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fc:	4b4b      	ldr	r3, [pc, #300]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80017fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001802:	4a4a      	ldr	r2, [pc, #296]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff fa58 	bl	8000cc0 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fa54 	bl	8000cc0 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1d4      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001826:	4b41      	ldr	r3, [pc, #260]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0ef      	beq.n	8001814 <HAL_RCC_OscConfig+0x3ec>
 8001834:	e01b      	b.n	800186e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183c:	4a3b      	ldr	r2, [pc, #236]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff fa3b 	bl	8000cc0 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184e:	f7ff fa37 	bl	8000cc0 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1b7      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001860:	4b32      	ldr	r3, [pc, #200]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1ef      	bne.n	800184e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80a6 	beq.w	80019c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10d      	bne.n	80018a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	4a26      	ldr	r2, [pc, #152]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001896:	6593      	str	r3, [r2, #88]	; 0x58
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a4:	2301      	movs	r3, #1
 80018a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <HAL_RCC_OscConfig+0x508>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d118      	bne.n	80018e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_RCC_OscConfig+0x508>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <HAL_RCC_OscConfig+0x508>)
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c0:	f7ff f9fe 	bl	8000cc0 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c8:	f7ff f9fa 	bl	8000cc0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e17a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_RCC_OscConfig+0x508>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d108      	bne.n	8001900 <HAL_RCC_OscConfig+0x4d8>
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80018f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <HAL_RCC_OscConfig+0x504>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018fe:	e029      	b.n	8001954 <HAL_RCC_OscConfig+0x52c>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b05      	cmp	r3, #5
 8001906:	d115      	bne.n	8001934 <HAL_RCC_OscConfig+0x50c>
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <HAL_RCC_OscConfig+0x504>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191e:	4a03      	ldr	r2, [pc, #12]	; (800192c <HAL_RCC_OscConfig+0x504>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001928:	e014      	b.n	8001954 <HAL_RCC_OscConfig+0x52c>
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	40007000 	.word	0x40007000
 8001934:	4b9c      	ldr	r3, [pc, #624]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	4a9b      	ldr	r2, [pc, #620]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001944:	4b98      	ldr	r3, [pc, #608]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194a:	4a97      	ldr	r2, [pc, #604]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d016      	beq.n	800198a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff f9b0 	bl	8000cc0 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001962:	e00a      	b.n	800197a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001964:	f7ff f9ac 	bl	8000cc0 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e12a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800197a:	4b8b      	ldr	r3, [pc, #556]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 800197c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0ed      	beq.n	8001964 <HAL_RCC_OscConfig+0x53c>
 8001988:	e015      	b.n	80019b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198a:	f7ff f999 	bl	8000cc0 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001990:	e00a      	b.n	80019a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001992:	f7ff f995 	bl	8000cc0 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e113      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a8:	4b7f      	ldr	r3, [pc, #508]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ed      	bne.n	8001992 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d105      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019bc:	4b7a      	ldr	r3, [pc, #488]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	4a79      	ldr	r2, [pc, #484]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 80019c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80fe 	beq.w	8001bce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	f040 80d0 	bne.w	8001b7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019dc:	4b72      	ldr	r3, [pc, #456]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f003 0203 	and.w	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d130      	bne.n	8001a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	3b01      	subs	r3, #1
 80019fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d127      	bne.n	8001a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d11f      	bne.n	8001a52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a1c:	2a07      	cmp	r2, #7
 8001a1e:	bf14      	ite	ne
 8001a20:	2201      	movne	r2, #1
 8001a22:	2200      	moveq	r2, #0
 8001a24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d113      	bne.n	8001a52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a34:	085b      	lsrs	r3, r3, #1
 8001a36:	3b01      	subs	r3, #1
 8001a38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d109      	bne.n	8001a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	085b      	lsrs	r3, r3, #1
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d06e      	beq.n	8001b30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b0c      	cmp	r3, #12
 8001a56:	d069      	beq.n	8001b2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a58:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a64:	4b50      	ldr	r3, [pc, #320]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0ad      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a74:	4b4c      	ldr	r3, [pc, #304]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a4b      	ldr	r2, [pc, #300]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a80:	f7ff f91e 	bl	8000cc0 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff f91a 	bl	8000cc0 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e09a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9a:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa6:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	4b40      	ldr	r3, [pc, #256]	; (8001bac <HAL_RCC_OscConfig+0x784>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ab6:	3a01      	subs	r2, #1
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	4311      	orrs	r1, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ac0:	0212      	lsls	r2, r2, #8
 8001ac2:	4311      	orrs	r1, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ac8:	0852      	lsrs	r2, r2, #1
 8001aca:	3a01      	subs	r2, #1
 8001acc:	0552      	lsls	r2, r2, #21
 8001ace:	4311      	orrs	r1, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ad4:	0852      	lsrs	r2, r2, #1
 8001ad6:	3a01      	subs	r2, #1
 8001ad8:	0652      	lsls	r2, r2, #25
 8001ada:	4311      	orrs	r1, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ae0:	0912      	lsrs	r2, r2, #4
 8001ae2:	0452      	lsls	r2, r2, #17
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	4930      	ldr	r1, [pc, #192]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001aec:	4b2e      	ldr	r3, [pc, #184]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001af8:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4a2a      	ldr	r2, [pc, #168]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b04:	f7ff f8dc 	bl	8000cc0 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff f8d8 	bl	8000cc0 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e058      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1e:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b2a:	e050      	b.n	8001bce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e04f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b30:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d148      	bne.n	8001bce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b54:	f7ff f8b4 	bl	8000cc0 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff f8b0 	bl	8000cc0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e030      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x734>
 8001b7a:	e028      	b.n	8001bce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d023      	beq.n	8001bca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <HAL_RCC_OscConfig+0x780>)
 8001b88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7ff f897 	bl	8000cc0 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b94:	e00c      	b.n	8001bb0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b96:	f7ff f893 	bl	8000cc0 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d905      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e013      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_OscConfig+0x7b0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ec      	bne.n	8001b96 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_RCC_OscConfig+0x7b0>)
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4905      	ldr	r1, [pc, #20]	; (8001bd8 <HAL_RCC_OscConfig+0x7b0>)
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_RCC_OscConfig+0x7b4>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60cb      	str	r3, [r1, #12]
 8001bc8:	e001      	b.n	8001bce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	feeefffc 	.word	0xfeeefffc

08001be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0e7      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b75      	ldr	r3, [pc, #468]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d910      	bls.n	8001c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b72      	ldr	r3, [pc, #456]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 0207 	bic.w	r2, r3, #7
 8001c0a:	4970      	ldr	r1, [pc, #448]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b6e      	ldr	r3, [pc, #440]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0cf      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d010      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	4b66      	ldr	r3, [pc, #408]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d908      	bls.n	8001c52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4960      	ldr	r1, [pc, #384]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d04c      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c66:	4b5a      	ldr	r3, [pc, #360]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d121      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0a6      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7e:	4b54      	ldr	r3, [pc, #336]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d115      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e09a      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c96:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e08e      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e086      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb6:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f023 0203 	bic.w	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4943      	ldr	r1, [pc, #268]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc8:	f7fe fffa 	bl	8000cc0 <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd0:	f7fe fff6 	bl	8000cc0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e06e      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 020c 	and.w	r2, r3, #12
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d1eb      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d010      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d208      	bcs.n	8001d26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	492b      	ldr	r1, [pc, #172]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d210      	bcs.n	8001d56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 0207 	bic.w	r2, r3, #7
 8001d3c:	4923      	ldr	r1, [pc, #140]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e036      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d008      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	4918      	ldr	r1, [pc, #96]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d009      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4910      	ldr	r1, [pc, #64]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d94:	f000 f824 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	490b      	ldr	r1, [pc, #44]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f4>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
 8001db0:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001db2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1fc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ff31 	bl	8000c20 <HAL_InitTick>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dc2:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	08004024 	.word	0x08004024
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	2000000c 	.word	0x2000000c

08001de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df8:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x34>
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d121      	bne.n	8001e52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d11e      	bne.n	8001e52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e14:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e20:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	e005      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e3c:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10d      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d102      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	e004      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d134      	bne.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d003      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d003      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0xac>
 8001e84:	e005      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e88:	617b      	str	r3, [r7, #20]
      break;
 8001e8a:	e005      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e8e:	617b      	str	r3, [r7, #20]
      break;
 8001e90:	e002      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	617b      	str	r3, [r7, #20]
      break;
 8001e96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	fb03 f202 	mul.w	r2, r3, r2
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	0e5b      	lsrs	r3, r3, #25
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ed8:	69bb      	ldr	r3, [r7, #24]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	0800403c 	.word	0x0800403c
 8001ef0:	00f42400 	.word	0x00f42400
 8001ef4:	007a1200 	.word	0x007a1200

08001ef8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000008 	.word	0x20000008

08001f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f14:	f7ff fff0 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	0a1b      	lsrs	r3, r3, #8
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4904      	ldr	r1, [pc, #16]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	08004034 	.word	0x08004034

08001f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f40:	f7ff ffda 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	0adb      	lsrs	r3, r3, #11
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	4904      	ldr	r1, [pc, #16]	; (8001f64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08004034 	.word	0x08004034

08001f68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f74:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f80:	f7ff f9ee 	bl	8001360 <HAL_PWREx_GetVoltageRange>
 8001f84:	6178      	str	r0, [r7, #20]
 8001f86:	e014      	b.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	4a24      	ldr	r2, [pc, #144]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f92:	6593      	str	r3, [r2, #88]	; 0x58
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fa0:	f7ff f9de 	bl	8001360 <HAL_PWREx_GetVoltageRange>
 8001fa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb8:	d10b      	bne.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d919      	bls.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2ba0      	cmp	r3, #160	; 0xa0
 8001fc4:	d902      	bls.n	8001fcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e013      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fcc:	2301      	movs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	e010      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b80      	cmp	r3, #128	; 0x80
 8001fd6:	d902      	bls.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fd8:	2303      	movs	r3, #3
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e00a      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d102      	bne.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	e004      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b70      	cmp	r3, #112	; 0x70
 8001fee:	d101      	bne.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 0207 	bic.w	r2, r3, #7
 8001ffc:	4909      	ldr	r1, [pc, #36]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	40022000 	.word	0x40022000

08002028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002030:	2300      	movs	r3, #0
 8002032:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002034:	2300      	movs	r3, #0
 8002036:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002040:	2b00      	cmp	r3, #0
 8002042:	d041      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002048:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800204c:	d02a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800204e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002052:	d824      	bhi.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002058:	d008      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800205a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800205e:	d81e      	bhi.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002068:	d010      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800206a:	e018      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800206c:	4b86      	ldr	r3, [pc, #536]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4a85      	ldr	r2, [pc, #532]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002076:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002078:	e015      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fabb 	bl	80025fc <RCCEx_PLLSAI1_Config>
 8002086:	4603      	mov	r3, r0
 8002088:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800208a:	e00c      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3320      	adds	r3, #32
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fba6 	bl	80027e4 <RCCEx_PLLSAI2_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800209c:	e003      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	74fb      	strb	r3, [r7, #19]
      break;
 80020a2:	e000      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020a6:	7cfb      	ldrb	r3, [r7, #19]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10b      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020ac:	4b76      	ldr	r3, [pc, #472]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020ba:	4973      	ldr	r1, [pc, #460]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020c2:	e001      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d041      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020dc:	d02a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020e2:	d824      	bhi.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020e8:	d008      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020ee:	d81e      	bhi.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f8:	d010      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020fa:	e018      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020fc:	4b62      	ldr	r3, [pc, #392]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a61      	ldr	r2, [pc, #388]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002108:	e015      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3304      	adds	r3, #4
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fa73 	bl	80025fc <RCCEx_PLLSAI1_Config>
 8002116:	4603      	mov	r3, r0
 8002118:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800211a:	e00c      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3320      	adds	r3, #32
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fb5e 	bl	80027e4 <RCCEx_PLLSAI2_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800212c:	e003      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	74fb      	strb	r3, [r7, #19]
      break;
 8002132:	e000      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800213c:	4b52      	ldr	r3, [pc, #328]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800214a:	494f      	ldr	r1, [pc, #316]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002152:	e001      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80a0 	beq.w	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800216a:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00d      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002180:	4b41      	ldr	r3, [pc, #260]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	4a40      	ldr	r2, [pc, #256]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218a:	6593      	str	r3, [r2, #88]	; 0x58
 800218c:	4b3e      	ldr	r3, [pc, #248]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002198:	2301      	movs	r3, #1
 800219a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800219c:	4b3b      	ldr	r3, [pc, #236]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a3a      	ldr	r2, [pc, #232]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021a8:	f7fe fd8a 	bl	8000cc0 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ae:	e009      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b0:	f7fe fd86 	bl	8000cc0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d902      	bls.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	74fb      	strb	r3, [r7, #19]
        break;
 80021c2:	e005      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021c4:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ef      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d15c      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d01f      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d019      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002200:	4b21      	ldr	r3, [pc, #132]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	4a20      	ldr	r2, [pc, #128]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002216:	4a1c      	ldr	r2, [pc, #112]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002220:	4a19      	ldr	r2, [pc, #100]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d016      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7fe fd45 	bl	8000cc0 <HAL_GetTick>
 8002236:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002238:	e00b      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fd41 	bl	8000cc0 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d902      	bls.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	74fb      	strb	r3, [r7, #19]
            break;
 8002250:	e006      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ec      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10c      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002276:	4904      	ldr	r1, [pc, #16]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800227e:	e009      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	74bb      	strb	r3, [r7, #18]
 8002284:	e006      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002294:	7c7b      	ldrb	r3, [r7, #17]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d105      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b9e      	ldr	r3, [pc, #632]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	4a9d      	ldr	r2, [pc, #628]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b2:	4b98      	ldr	r3, [pc, #608]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b8:	f023 0203 	bic.w	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c0:	4994      	ldr	r1, [pc, #592]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d4:	4b8f      	ldr	r3, [pc, #572]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f023 020c 	bic.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e2:	498c      	ldr	r1, [pc, #560]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022f6:	4b87      	ldr	r3, [pc, #540]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	4983      	ldr	r1, [pc, #524]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002318:	4b7e      	ldr	r3, [pc, #504]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	497b      	ldr	r1, [pc, #492]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002348:	4972      	ldr	r1, [pc, #456]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800235c:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	496a      	ldr	r1, [pc, #424]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800237e:	4b65      	ldr	r3, [pc, #404]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002384:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	4961      	ldr	r1, [pc, #388]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023a0:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ae:	4959      	ldr	r1, [pc, #356]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c2:	4b54      	ldr	r3, [pc, #336]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d0:	4950      	ldr	r1, [pc, #320]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023e4:	4b4b      	ldr	r3, [pc, #300]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	4948      	ldr	r1, [pc, #288]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002406:	4b43      	ldr	r3, [pc, #268]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	493f      	ldr	r1, [pc, #252]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d028      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002428:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002436:	4937      	ldr	r1, [pc, #220]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002446:	d106      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002448:	4b32      	ldr	r3, [pc, #200]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a31      	ldr	r2, [pc, #196]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002452:	60d3      	str	r3, [r2, #12]
 8002454:	e011      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800245a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800245e:	d10c      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	2101      	movs	r1, #1
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f8c8 	bl	80025fc <RCCEx_PLLSAI1_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d028      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	491f      	ldr	r1, [pc, #124]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024a4:	d106      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b0:	60d3      	str	r3, [r2, #12]
 80024b2:	e011      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2101      	movs	r1, #1
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 f899 	bl	80025fc <RCCEx_PLLSAI1_Config>
 80024ca:	4603      	mov	r3, r0
 80024cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d02b      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f2:	4908      	ldr	r1, [pc, #32]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002502:	d109      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a02      	ldr	r2, [pc, #8]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250e:	60d3      	str	r3, [r2, #12]
 8002510:	e014      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002520:	d10c      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3304      	adds	r3, #4
 8002526:	2101      	movs	r1, #1
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f867 	bl	80025fc <RCCEx_PLLSAI1_Config>
 800252e:	4603      	mov	r3, r0
 8002530:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d02f      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002556:	4928      	ldr	r1, [pc, #160]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002566:	d10d      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3304      	adds	r3, #4
 800256c:	2102      	movs	r1, #2
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f844 	bl	80025fc <RCCEx_PLLSAI1_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d014      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	74bb      	strb	r3, [r7, #18]
 8002582:	e011      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3320      	adds	r3, #32
 8002592:	2102      	movs	r1, #2
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f925 	bl	80027e4 <RCCEx_PLLSAI2_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025c2:	490d      	ldr	r1, [pc, #52]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025e6:	4904      	ldr	r1, [pc, #16]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000

080025fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800260a:	4b75      	ldr	r3, [pc, #468]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002616:	4b72      	ldr	r3, [pc, #456]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0203 	and.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d10d      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
       ||
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800262e:	4b6c      	ldr	r3, [pc, #432]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
       ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d047      	beq.n	80026d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e044      	b.n	80026d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d018      	beq.n	8002682 <RCCEx_PLLSAI1_Config+0x86>
 8002650:	2b03      	cmp	r3, #3
 8002652:	d825      	bhi.n	80026a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002654:	2b01      	cmp	r3, #1
 8002656:	d002      	beq.n	800265e <RCCEx_PLLSAI1_Config+0x62>
 8002658:	2b02      	cmp	r3, #2
 800265a:	d009      	beq.n	8002670 <RCCEx_PLLSAI1_Config+0x74>
 800265c:	e020      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800265e:	4b60      	ldr	r3, [pc, #384]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11d      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266e:	e01a      	b.n	80026a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002670:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d116      	bne.n	80026aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002680:	e013      	b.n	80026aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002682:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800268e:	4b54      	ldr	r3, [pc, #336]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800269e:	e006      	b.n	80026ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      break;
 80026a4:	e004      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026a6:	bf00      	nop
 80026a8:	e002      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026aa:	bf00      	nop
 80026ac:	e000      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026b6:	4b4a      	ldr	r3, [pc, #296]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	430b      	orrs	r3, r1
 80026cc:	4944      	ldr	r1, [pc, #272]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d17d      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026d8:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a40      	ldr	r2, [pc, #256]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e4:	f7fe faec 	bl	8000cc0 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026ea:	e009      	b.n	8002700 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ec:	f7fe fae8 	bl	8000cc0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d902      	bls.n	8002700 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	73fb      	strb	r3, [r7, #15]
        break;
 80026fe:	e005      	b.n	800270c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002700:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ef      	bne.n	80026ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d160      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d111      	bne.n	800273c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6892      	ldr	r2, [r2, #8]
 8002728:	0211      	lsls	r1, r2, #8
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68d2      	ldr	r2, [r2, #12]
 800272e:	0912      	lsrs	r2, r2, #4
 8002730:	0452      	lsls	r2, r2, #17
 8002732:	430a      	orrs	r2, r1
 8002734:	492a      	ldr	r1, [pc, #168]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	610b      	str	r3, [r1, #16]
 800273a:	e027      	b.n	800278c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d112      	bne.n	8002768 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002742:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800274a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6892      	ldr	r2, [r2, #8]
 8002752:	0211      	lsls	r1, r2, #8
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6912      	ldr	r2, [r2, #16]
 8002758:	0852      	lsrs	r2, r2, #1
 800275a:	3a01      	subs	r2, #1
 800275c:	0552      	lsls	r2, r2, #21
 800275e:	430a      	orrs	r2, r1
 8002760:	491f      	ldr	r1, [pc, #124]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	610b      	str	r3, [r1, #16]
 8002766:	e011      	b.n	800278c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002770:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6892      	ldr	r2, [r2, #8]
 8002778:	0211      	lsls	r1, r2, #8
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6952      	ldr	r2, [r2, #20]
 800277e:	0852      	lsrs	r2, r2, #1
 8002780:	3a01      	subs	r2, #1
 8002782:	0652      	lsls	r2, r2, #25
 8002784:	430a      	orrs	r2, r1
 8002786:	4916      	ldr	r1, [pc, #88]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002796:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7fe fa92 	bl	8000cc0 <HAL_GetTick>
 800279c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800279e:	e009      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a0:	f7fe fa8e 	bl	8000cc0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d902      	bls.n	80027b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	73fb      	strb	r3, [r7, #15]
          break;
 80027b2:	e005      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ef      	beq.n	80027a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	4904      	ldr	r1, [pc, #16]	; (80027e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000

080027e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027f2:	4b6a      	ldr	r3, [pc, #424]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d018      	beq.n	8002830 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027fe:	4b67      	ldr	r3, [pc, #412]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d10d      	bne.n	800282a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
       ||
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002816:	4b61      	ldr	r3, [pc, #388]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
       ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d047      	beq.n	80028ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	e044      	b.n	80028ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d018      	beq.n	800286a <RCCEx_PLLSAI2_Config+0x86>
 8002838:	2b03      	cmp	r3, #3
 800283a:	d825      	bhi.n	8002888 <RCCEx_PLLSAI2_Config+0xa4>
 800283c:	2b01      	cmp	r3, #1
 800283e:	d002      	beq.n	8002846 <RCCEx_PLLSAI2_Config+0x62>
 8002840:	2b02      	cmp	r3, #2
 8002842:	d009      	beq.n	8002858 <RCCEx_PLLSAI2_Config+0x74>
 8002844:	e020      	b.n	8002888 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002846:	4b55      	ldr	r3, [pc, #340]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11d      	bne.n	800288e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002856:	e01a      	b.n	800288e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d116      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002868:	e013      	b.n	8002892 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800286a:	4b4c      	ldr	r3, [pc, #304]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002876:	4b49      	ldr	r3, [pc, #292]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002886:	e006      	b.n	8002896 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e004      	b.n	8002898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800288e:	bf00      	nop
 8002890:	e002      	b.n	8002898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002892:	bf00      	nop
 8002894:	e000      	b.n	8002898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002896:	bf00      	nop
    }

    if(status == HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10d      	bne.n	80028ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	430b      	orrs	r3, r1
 80028b4:	4939      	ldr	r1, [pc, #228]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d167      	bne.n	8002990 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028c0:	4b36      	ldr	r3, [pc, #216]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a35      	ldr	r2, [pc, #212]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7fe f9f8 	bl	8000cc0 <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028d2:	e009      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028d4:	f7fe f9f4 	bl	8000cc0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d902      	bls.n	80028e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	73fb      	strb	r3, [r7, #15]
        break;
 80028e6:	e005      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028e8:	4b2c      	ldr	r3, [pc, #176]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1ef      	bne.n	80028d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d14a      	bne.n	8002990 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d111      	bne.n	8002924 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002900:	4b26      	ldr	r3, [pc, #152]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6892      	ldr	r2, [r2, #8]
 8002910:	0211      	lsls	r1, r2, #8
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68d2      	ldr	r2, [r2, #12]
 8002916:	0912      	lsrs	r2, r2, #4
 8002918:	0452      	lsls	r2, r2, #17
 800291a:	430a      	orrs	r2, r1
 800291c:	491f      	ldr	r1, [pc, #124]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	614b      	str	r3, [r1, #20]
 8002922:	e011      	b.n	8002948 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800292c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6892      	ldr	r2, [r2, #8]
 8002934:	0211      	lsls	r1, r2, #8
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6912      	ldr	r2, [r2, #16]
 800293a:	0852      	lsrs	r2, r2, #1
 800293c:	3a01      	subs	r2, #1
 800293e:	0652      	lsls	r2, r2, #25
 8002940:	430a      	orrs	r2, r1
 8002942:	4916      	ldr	r1, [pc, #88]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002944:	4313      	orrs	r3, r2
 8002946:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a13      	ldr	r2, [pc, #76]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800294e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002952:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe f9b4 	bl	8000cc0 <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800295a:	e009      	b.n	8002970 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800295c:	f7fe f9b0 	bl	8000cc0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d902      	bls.n	8002970 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	73fb      	strb	r3, [r7, #15]
          break;
 800296e:	e005      	b.n	800297c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ef      	beq.n	800295c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4904      	ldr	r1, [pc, #16]	; (800299c <RCCEx_PLLSAI2_Config+0x1b8>)
 800298c:	4313      	orrs	r3, r2
 800298e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e095      	b.n	8002ade <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d108      	bne.n	80029cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029c2:	d009      	beq.n	80029d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	61da      	str	r2, [r3, #28]
 80029ca:	e005      	b.n	80029d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f877 	bl	8002ae6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a18:	d902      	bls.n	8002a20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e002      	b.n	8002a26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a2e:	d007      	beq.n	8002a40 <HAL_SPI_Init+0xa0>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a38:	d002      	beq.n	8002a40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	ea42 0103 	orr.w	r1, r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	0c1b      	lsrs	r3, r3, #16
 8002a9c:	f003 0204 	and.w	r2, r3, #4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002abc:	ea42 0103 	orr.w	r1, r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	099b      	lsrs	r3, r3, #6
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10f      	bne.n	8002b40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	099b      	lsrs	r3, r3, #6
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d004      	beq.n	8002b40 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
    return;
 8002b3e:	e0d7      	b.n	8002cf0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_SPI_IRQHandler+0x66>
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	09db      	lsrs	r3, r3, #7
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d004      	beq.n	8002b62 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
    return;
 8002b60:	e0c6      	b.n	8002cf0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10c      	bne.n	8002b88 <HAL_SPI_IRQHandler+0x8c>
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80b4 	beq.w	8002cf0 <HAL_SPI_IRQHandler+0x1f4>
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80ad 	beq.w	8002cf0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d023      	beq.n	8002bea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d011      	beq.n	8002bd2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb2:	f043 0204 	orr.w	r2, r3, #4
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	e00b      	b.n	8002bea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]
        return;
 8002be8:	e082      	b.n	8002cf0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d014      	beq.n	8002c20 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00c      	beq.n	8002c46 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c30:	f043 0208 	orr.w	r2, r3, #8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d04f      	beq.n	8002cee <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c5c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d104      	bne.n	8002c7a <HAL_SPI_IRQHandler+0x17e>
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d034      	beq.n	8002ce4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0203 	bic.w	r2, r2, #3
 8002c88:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d011      	beq.n	8002cb6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_SPI_IRQHandler+0x1fc>)
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe f92b 	bl	8000efa <HAL_DMA_Abort_IT>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d016      	beq.n	8002cec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <HAL_SPI_IRQHandler+0x1fc>)
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe f915 	bl	8000efa <HAL_DMA_Abort_IT>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002ce2:	e003      	b.n	8002cec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f809 	bl	8002cfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002cea:	e000      	b.n	8002cee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002cec:	bf00      	nop
    return;
 8002cee:	bf00      	nop
  }
}
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	08002d2d 	.word	0x08002d2d

08002cfc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d1e:	b2db      	uxtb	r3, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff ffd7 	bl	8002cfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e040      	b.n	8002dea <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d106      	bne.n	8002d7e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7fd fd7f 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2224      	movs	r2, #36	; 0x24
 8002d82:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f82d 	bl	8002df4 <UART_SetConfig>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e022      	b.n	8002dea <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fad9 	bl	8003364 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dd0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0201 	orr.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fb60 	bl	80034a8 <UART_CheckIdleState>
 8002de8:	4603      	mov	r3, r0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df8:	b08a      	sub	sp, #40	; 0x28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4ba4      	ldr	r3, [pc, #656]	; (80030b4 <UART_SetConfig+0x2c0>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a99      	ldr	r2, [pc, #612]	; (80030b8 <UART_SetConfig+0x2c4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d004      	beq.n	8002e60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a90      	ldr	r2, [pc, #576]	; (80030bc <UART_SetConfig+0x2c8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d126      	bne.n	8002ecc <UART_SetConfig+0xd8>
 8002e7e:	4b90      	ldr	r3, [pc, #576]	; (80030c0 <UART_SetConfig+0x2cc>)
 8002e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d81b      	bhi.n	8002ec4 <UART_SetConfig+0xd0>
 8002e8c:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0xa0>)
 8002e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e92:	bf00      	nop
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002eb5 	.word	0x08002eb5
 8002e9c:	08002ead 	.word	0x08002ead
 8002ea0:	08002ebd 	.word	0x08002ebd
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eaa:	e116      	b.n	80030da <UART_SetConfig+0x2e6>
 8002eac:	2302      	movs	r3, #2
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eb2:	e112      	b.n	80030da <UART_SetConfig+0x2e6>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eba:	e10e      	b.n	80030da <UART_SetConfig+0x2e6>
 8002ebc:	2308      	movs	r3, #8
 8002ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ec2:	e10a      	b.n	80030da <UART_SetConfig+0x2e6>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eca:	e106      	b.n	80030da <UART_SetConfig+0x2e6>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a7c      	ldr	r2, [pc, #496]	; (80030c4 <UART_SetConfig+0x2d0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d138      	bne.n	8002f48 <UART_SetConfig+0x154>
 8002ed6:	4b7a      	ldr	r3, [pc, #488]	; (80030c0 <UART_SetConfig+0x2cc>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	d82d      	bhi.n	8002f40 <UART_SetConfig+0x14c>
 8002ee4:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <UART_SetConfig+0xf8>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002f21 	.word	0x08002f21
 8002ef0:	08002f41 	.word	0x08002f41
 8002ef4:	08002f41 	.word	0x08002f41
 8002ef8:	08002f41 	.word	0x08002f41
 8002efc:	08002f31 	.word	0x08002f31
 8002f00:	08002f41 	.word	0x08002f41
 8002f04:	08002f41 	.word	0x08002f41
 8002f08:	08002f41 	.word	0x08002f41
 8002f0c:	08002f29 	.word	0x08002f29
 8002f10:	08002f41 	.word	0x08002f41
 8002f14:	08002f41 	.word	0x08002f41
 8002f18:	08002f41 	.word	0x08002f41
 8002f1c:	08002f39 	.word	0x08002f39
 8002f20:	2300      	movs	r3, #0
 8002f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f26:	e0d8      	b.n	80030da <UART_SetConfig+0x2e6>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f2e:	e0d4      	b.n	80030da <UART_SetConfig+0x2e6>
 8002f30:	2304      	movs	r3, #4
 8002f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f36:	e0d0      	b.n	80030da <UART_SetConfig+0x2e6>
 8002f38:	2308      	movs	r3, #8
 8002f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f3e:	e0cc      	b.n	80030da <UART_SetConfig+0x2e6>
 8002f40:	2310      	movs	r3, #16
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f46:	e0c8      	b.n	80030da <UART_SetConfig+0x2e6>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a5e      	ldr	r2, [pc, #376]	; (80030c8 <UART_SetConfig+0x2d4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d125      	bne.n	8002f9e <UART_SetConfig+0x1aa>
 8002f52:	4b5b      	ldr	r3, [pc, #364]	; (80030c0 <UART_SetConfig+0x2cc>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f5c:	2b30      	cmp	r3, #48	; 0x30
 8002f5e:	d016      	beq.n	8002f8e <UART_SetConfig+0x19a>
 8002f60:	2b30      	cmp	r3, #48	; 0x30
 8002f62:	d818      	bhi.n	8002f96 <UART_SetConfig+0x1a2>
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d00a      	beq.n	8002f7e <UART_SetConfig+0x18a>
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d814      	bhi.n	8002f96 <UART_SetConfig+0x1a2>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <UART_SetConfig+0x182>
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d008      	beq.n	8002f86 <UART_SetConfig+0x192>
 8002f74:	e00f      	b.n	8002f96 <UART_SetConfig+0x1a2>
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f7c:	e0ad      	b.n	80030da <UART_SetConfig+0x2e6>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f84:	e0a9      	b.n	80030da <UART_SetConfig+0x2e6>
 8002f86:	2304      	movs	r3, #4
 8002f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8c:	e0a5      	b.n	80030da <UART_SetConfig+0x2e6>
 8002f8e:	2308      	movs	r3, #8
 8002f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f94:	e0a1      	b.n	80030da <UART_SetConfig+0x2e6>
 8002f96:	2310      	movs	r3, #16
 8002f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9c:	e09d      	b.n	80030da <UART_SetConfig+0x2e6>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a4a      	ldr	r2, [pc, #296]	; (80030cc <UART_SetConfig+0x2d8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d125      	bne.n	8002ff4 <UART_SetConfig+0x200>
 8002fa8:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <UART_SetConfig+0x2cc>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8002fb4:	d016      	beq.n	8002fe4 <UART_SetConfig+0x1f0>
 8002fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8002fb8:	d818      	bhi.n	8002fec <UART_SetConfig+0x1f8>
 8002fba:	2b80      	cmp	r3, #128	; 0x80
 8002fbc:	d00a      	beq.n	8002fd4 <UART_SetConfig+0x1e0>
 8002fbe:	2b80      	cmp	r3, #128	; 0x80
 8002fc0:	d814      	bhi.n	8002fec <UART_SetConfig+0x1f8>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <UART_SetConfig+0x1d8>
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d008      	beq.n	8002fdc <UART_SetConfig+0x1e8>
 8002fca:	e00f      	b.n	8002fec <UART_SetConfig+0x1f8>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd2:	e082      	b.n	80030da <UART_SetConfig+0x2e6>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fda:	e07e      	b.n	80030da <UART_SetConfig+0x2e6>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fe2:	e07a      	b.n	80030da <UART_SetConfig+0x2e6>
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fea:	e076      	b.n	80030da <UART_SetConfig+0x2e6>
 8002fec:	2310      	movs	r3, #16
 8002fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff2:	e072      	b.n	80030da <UART_SetConfig+0x2e6>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a35      	ldr	r2, [pc, #212]	; (80030d0 <UART_SetConfig+0x2dc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d12a      	bne.n	8003054 <UART_SetConfig+0x260>
 8002ffe:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <UART_SetConfig+0x2cc>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800300c:	d01a      	beq.n	8003044 <UART_SetConfig+0x250>
 800300e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003012:	d81b      	bhi.n	800304c <UART_SetConfig+0x258>
 8003014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003018:	d00c      	beq.n	8003034 <UART_SetConfig+0x240>
 800301a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301e:	d815      	bhi.n	800304c <UART_SetConfig+0x258>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <UART_SetConfig+0x238>
 8003024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003028:	d008      	beq.n	800303c <UART_SetConfig+0x248>
 800302a:	e00f      	b.n	800304c <UART_SetConfig+0x258>
 800302c:	2300      	movs	r3, #0
 800302e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003032:	e052      	b.n	80030da <UART_SetConfig+0x2e6>
 8003034:	2302      	movs	r3, #2
 8003036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800303a:	e04e      	b.n	80030da <UART_SetConfig+0x2e6>
 800303c:	2304      	movs	r3, #4
 800303e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003042:	e04a      	b.n	80030da <UART_SetConfig+0x2e6>
 8003044:	2308      	movs	r3, #8
 8003046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800304a:	e046      	b.n	80030da <UART_SetConfig+0x2e6>
 800304c:	2310      	movs	r3, #16
 800304e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003052:	e042      	b.n	80030da <UART_SetConfig+0x2e6>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a17      	ldr	r2, [pc, #92]	; (80030b8 <UART_SetConfig+0x2c4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d13a      	bne.n	80030d4 <UART_SetConfig+0x2e0>
 800305e:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <UART_SetConfig+0x2cc>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003064:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003068:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800306c:	d01a      	beq.n	80030a4 <UART_SetConfig+0x2b0>
 800306e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003072:	d81b      	bhi.n	80030ac <UART_SetConfig+0x2b8>
 8003074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003078:	d00c      	beq.n	8003094 <UART_SetConfig+0x2a0>
 800307a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307e:	d815      	bhi.n	80030ac <UART_SetConfig+0x2b8>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <UART_SetConfig+0x298>
 8003084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003088:	d008      	beq.n	800309c <UART_SetConfig+0x2a8>
 800308a:	e00f      	b.n	80030ac <UART_SetConfig+0x2b8>
 800308c:	2300      	movs	r3, #0
 800308e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003092:	e022      	b.n	80030da <UART_SetConfig+0x2e6>
 8003094:	2302      	movs	r3, #2
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800309a:	e01e      	b.n	80030da <UART_SetConfig+0x2e6>
 800309c:	2304      	movs	r3, #4
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a2:	e01a      	b.n	80030da <UART_SetConfig+0x2e6>
 80030a4:	2308      	movs	r3, #8
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030aa:	e016      	b.n	80030da <UART_SetConfig+0x2e6>
 80030ac:	2310      	movs	r3, #16
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b2:	e012      	b.n	80030da <UART_SetConfig+0x2e6>
 80030b4:	efff69f3 	.word	0xefff69f3
 80030b8:	40008000 	.word	0x40008000
 80030bc:	40013800 	.word	0x40013800
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40004400 	.word	0x40004400
 80030c8:	40004800 	.word	0x40004800
 80030cc:	40004c00 	.word	0x40004c00
 80030d0:	40005000 	.word	0x40005000
 80030d4:	2310      	movs	r3, #16
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a9f      	ldr	r2, [pc, #636]	; (800335c <UART_SetConfig+0x568>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d17a      	bne.n	80031da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d824      	bhi.n	8003136 <UART_SetConfig+0x342>
 80030ec:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <UART_SetConfig+0x300>)
 80030ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f2:	bf00      	nop
 80030f4:	08003119 	.word	0x08003119
 80030f8:	08003137 	.word	0x08003137
 80030fc:	08003121 	.word	0x08003121
 8003100:	08003137 	.word	0x08003137
 8003104:	08003127 	.word	0x08003127
 8003108:	08003137 	.word	0x08003137
 800310c:	08003137 	.word	0x08003137
 8003110:	08003137 	.word	0x08003137
 8003114:	0800312f 	.word	0x0800312f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003118:	f7fe fefa 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 800311c:	61f8      	str	r0, [r7, #28]
        break;
 800311e:	e010      	b.n	8003142 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003120:	4b8f      	ldr	r3, [pc, #572]	; (8003360 <UART_SetConfig+0x56c>)
 8003122:	61fb      	str	r3, [r7, #28]
        break;
 8003124:	e00d      	b.n	8003142 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003126:	f7fe fe5b 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 800312a:	61f8      	str	r0, [r7, #28]
        break;
 800312c:	e009      	b.n	8003142 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800312e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003132:	61fb      	str	r3, [r7, #28]
        break;
 8003134:	e005      	b.n	8003142 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003140:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80fb 	beq.w	8003340 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	429a      	cmp	r2, r3
 8003158:	d305      	bcc.n	8003166 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003160:	69fa      	ldr	r2, [r7, #28]
 8003162:	429a      	cmp	r2, r3
 8003164:	d903      	bls.n	800316e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800316c:	e0e8      	b.n	8003340 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	2200      	movs	r2, #0
 8003172:	461c      	mov	r4, r3
 8003174:	4615      	mov	r5, r2
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	022b      	lsls	r3, r5, #8
 8003180:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003184:	0222      	lsls	r2, r4, #8
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	6849      	ldr	r1, [r1, #4]
 800318a:	0849      	lsrs	r1, r1, #1
 800318c:	2000      	movs	r0, #0
 800318e:	4688      	mov	r8, r1
 8003190:	4681      	mov	r9, r0
 8003192:	eb12 0a08 	adds.w	sl, r2, r8
 8003196:	eb43 0b09 	adc.w	fp, r3, r9
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031a8:	4650      	mov	r0, sl
 80031aa:	4659      	mov	r1, fp
 80031ac:	f7fd f80c 	bl	80001c8 <__aeabi_uldivmod>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4613      	mov	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031be:	d308      	bcc.n	80031d2 <UART_SetConfig+0x3de>
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c6:	d204      	bcs.n	80031d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	e0b6      	b.n	8003340 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031d8:	e0b2      	b.n	8003340 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e2:	d15e      	bne.n	80032a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80031e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d828      	bhi.n	800323e <UART_SetConfig+0x44a>
 80031ec:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <UART_SetConfig+0x400>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003219 	.word	0x08003219
 80031f8:	08003221 	.word	0x08003221
 80031fc:	08003229 	.word	0x08003229
 8003200:	0800323f 	.word	0x0800323f
 8003204:	0800322f 	.word	0x0800322f
 8003208:	0800323f 	.word	0x0800323f
 800320c:	0800323f 	.word	0x0800323f
 8003210:	0800323f 	.word	0x0800323f
 8003214:	08003237 	.word	0x08003237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003218:	f7fe fe7a 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 800321c:	61f8      	str	r0, [r7, #28]
        break;
 800321e:	e014      	b.n	800324a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003220:	f7fe fe8c 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 8003224:	61f8      	str	r0, [r7, #28]
        break;
 8003226:	e010      	b.n	800324a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003228:	4b4d      	ldr	r3, [pc, #308]	; (8003360 <UART_SetConfig+0x56c>)
 800322a:	61fb      	str	r3, [r7, #28]
        break;
 800322c:	e00d      	b.n	800324a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322e:	f7fe fdd7 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8003232:	61f8      	str	r0, [r7, #28]
        break;
 8003234:	e009      	b.n	800324a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800323a:	61fb      	str	r3, [r7, #28]
        break;
 800323c:	e005      	b.n	800324a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003248:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d077      	beq.n	8003340 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005a      	lsls	r2, r3, #1
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	085b      	lsrs	r3, r3, #1
 800325a:	441a      	add	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	fbb2 f3f3 	udiv	r3, r2, r3
 8003264:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b0f      	cmp	r3, #15
 800326a:	d916      	bls.n	800329a <UART_SetConfig+0x4a6>
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003272:	d212      	bcs.n	800329a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	b29b      	uxth	r3, r3
 8003278:	f023 030f 	bic.w	r3, r3, #15
 800327c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	b29b      	uxth	r3, r3
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	b29a      	uxth	r2, r3
 800328a:	8afb      	ldrh	r3, [r7, #22]
 800328c:	4313      	orrs	r3, r2
 800328e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	8afa      	ldrh	r2, [r7, #22]
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	e052      	b.n	8003340 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032a0:	e04e      	b.n	8003340 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d827      	bhi.n	80032fa <UART_SetConfig+0x506>
 80032aa:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <UART_SetConfig+0x4bc>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032dd 	.word	0x080032dd
 80032b8:	080032e5 	.word	0x080032e5
 80032bc:	080032fb 	.word	0x080032fb
 80032c0:	080032eb 	.word	0x080032eb
 80032c4:	080032fb 	.word	0x080032fb
 80032c8:	080032fb 	.word	0x080032fb
 80032cc:	080032fb 	.word	0x080032fb
 80032d0:	080032f3 	.word	0x080032f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7fe fe1c 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 80032d8:	61f8      	str	r0, [r7, #28]
        break;
 80032da:	e014      	b.n	8003306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032dc:	f7fe fe2e 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 80032e0:	61f8      	str	r0, [r7, #28]
        break;
 80032e2:	e010      	b.n	8003306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e4:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <UART_SetConfig+0x56c>)
 80032e6:	61fb      	str	r3, [r7, #28]
        break;
 80032e8:	e00d      	b.n	8003306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ea:	f7fe fd79 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 80032ee:	61f8      	str	r0, [r7, #28]
        break;
 80032f0:	e009      	b.n	8003306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f6:	61fb      	str	r3, [r7, #28]
        break;
 80032f8:	e005      	b.n	8003306 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003304:	bf00      	nop
    }

    if (pclk != 0U)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d019      	beq.n	8003340 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	085a      	lsrs	r2, r3, #1
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	441a      	add	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b0f      	cmp	r3, #15
 8003324:	d909      	bls.n	800333a <UART_SetConfig+0x546>
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d205      	bcs.n	800333a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60da      	str	r2, [r3, #12]
 8003338:	e002      	b.n	8003340 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800334c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003350:	4618      	mov	r0, r3
 8003352:	3728      	adds	r7, #40	; 0x28
 8003354:	46bd      	mov	sp, r7
 8003356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800335a:	bf00      	nop
 800335c:	40008000 	.word	0x40008000
 8003360:	00f42400 	.word	0x00f42400

08003364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01a      	beq.n	800347a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003462:	d10a      	bne.n	800347a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
  }
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034b8:	f7fd fc02 	bl	8000cc0 <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d10e      	bne.n	80034ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f82d 	bl	800353a <UART_WaitOnFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e023      	b.n	8003532 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d10e      	bne.n	8003516 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f817 	bl	800353a <UART_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e00d      	b.n	8003532 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b09c      	sub	sp, #112	; 0x70
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	4613      	mov	r3, r2
 8003548:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354a:	e0a5      	b.n	8003698 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800354e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003552:	f000 80a1 	beq.w	8003698 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fd fbb3 	bl	8000cc0 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <UART_WaitOnFlagUntilTimeout+0x32>
 8003566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003568:	2b00      	cmp	r3, #0
 800356a:	d13e      	bne.n	80035ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800357a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003580:	667b      	str	r3, [r7, #100]	; 0x64
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800358a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800358c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003590:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e6      	bne.n	800356c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3308      	adds	r3, #8
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	663b      	str	r3, [r7, #96]	; 0x60
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3308      	adds	r3, #8
 80035bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035be:	64ba      	str	r2, [r7, #72]	; 0x48
 80035c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035c6:	e841 2300 	strex	r3, r2, [r1]
 80035ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1e5      	bne.n	800359e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e067      	b.n	80036ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d04f      	beq.n	8003698 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003606:	d147      	bne.n	8003698 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003610:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003626:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003630:	637b      	str	r3, [r7, #52]	; 0x34
 8003632:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e6      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3308      	adds	r3, #8
 800364a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	613b      	str	r3, [r7, #16]
   return(result);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	66bb      	str	r3, [r7, #104]	; 0x68
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3308      	adds	r3, #8
 8003662:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003664:	623a      	str	r2, [r7, #32]
 8003666:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	69f9      	ldr	r1, [r7, #28]
 800366a:	6a3a      	ldr	r2, [r7, #32]
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	61bb      	str	r3, [r7, #24]
   return(result);
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e5      	bne.n	8003644 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e010      	b.n	80036ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4013      	ands	r3, r2
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	f43f af4a 	beq.w	800354c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3770      	adds	r7, #112	; 0x70
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b08c      	sub	sp, #48	; 0x30
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
 80036ce:	460b      	mov	r3, r1
 80036d0:	71bb      	strb	r3, [r7, #6]
 80036d2:	4613      	mov	r3, r2
 80036d4:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80036da:	79bb      	ldrb	r3, [r7, #6]
 80036dc:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80036de:	797b      	ldrb	r3, [r7, #5]
 80036e0:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80036e2:	f107 030c 	add.w	r3, r7, #12
 80036e6:	2207      	movs	r2, #7
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fc86 	bl	8003ffc <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80036f0:	f107 0318 	add.w	r3, r7, #24
 80036f4:	2218      	movs	r2, #24
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fc7f 	bl	8003ffc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80036fe:	233f      	movs	r3, #63	; 0x3f
 8003700:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8003702:	238a      	movs	r3, #138	; 0x8a
 8003704:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8003706:	f107 0314 	add.w	r3, r7, #20
 800370a:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800370c:	2303      	movs	r3, #3
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8003710:	f107 030c 	add.w	r3, r7, #12
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8003716:	2307      	movs	r3, #7
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800371a:	f107 0318 	add.w	r3, r7, #24
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fa09 	bl	8003b38 <hci_send_req>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	da01      	bge.n	8003730 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800372c:	23ff      	movs	r3, #255	; 0xff
 800372e:	e014      	b.n	800375a <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8003730:	7b3b      	ldrb	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8003736:	7b3b      	ldrb	r3, [r7, #12]
 8003738:	e00f      	b.n	800375a <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800373a:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800373e:	b29a      	uxth	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003744:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8003748:	b29a      	uxth	r2, r3
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800374e:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8003752:	b29a      	uxth	r2, r3
 8003754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003756:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3730      	adds	r7, #48	; 0x30
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8003762:	b590      	push	{r4, r7, lr}
 8003764:	b091      	sub	sp, #68	; 0x44
 8003766:	af00      	add	r7, sp, #0
 8003768:	603a      	str	r2, [r7, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	4603      	mov	r3, r0
 800376e:	71fb      	strb	r3, [r7, #7]
 8003770:	460b      	mov	r3, r1
 8003772:	71bb      	strb	r3, [r7, #6]
 8003774:	4613      	mov	r3, r2
 8003776:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800377c:	79bb      	ldrb	r3, [r7, #6]
 800377e:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8003780:	79bb      	ldrb	r3, [r7, #6]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	f107 030e 	add.w	r3, r7, #14
 800378c:	6814      	ldr	r4, [r2, #0]
 800378e:	6850      	ldr	r0, [r2, #4]
 8003790:	6891      	ldr	r1, [r2, #8]
 8003792:	68d2      	ldr	r2, [r2, #12]
 8003794:	601c      	str	r4, [r3, #0]
 8003796:	6058      	str	r0, [r3, #4]
 8003798:	6099      	str	r1, [r3, #8]
 800379a:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800379c:	797b      	ldrb	r3, [r7, #5]
 800379e:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 80037a0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80037a4:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 80037a6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80037aa:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 80037ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037b0:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 80037b4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80037b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80037bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037c0:	2218      	movs	r2, #24
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fc19 	bl	8003ffc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80037ca:	233f      	movs	r3, #63	; 0x3f
 80037cc:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80037ce:	2386      	movs	r3, #134	; 0x86
 80037d0:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 80037d2:	f107 030c 	add.w	r3, r7, #12
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 80037d8:	231a      	movs	r3, #26
 80037da:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 80037dc:	f107 030b 	add.w	r3, r7, #11
 80037e0:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 80037e2:	2301      	movs	r3, #1
 80037e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 80037e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 f9a3 	bl	8003b38 <hci_send_req>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	da01      	bge.n	80037fc <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80037f8:	23ff      	movs	r3, #255	; 0xff
 80037fa:	e005      	b.n	8003808 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80037fc:	7afb      	ldrb	r3, [r7, #11]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8003802:	7afb      	ldrb	r3, [r7, #11]
 8003804:	e000      	b.n	8003808 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3744      	adds	r7, #68	; 0x44
 800380c:	46bd      	mov	sp, r7
 800380e:	bd90      	pop	{r4, r7, pc}

08003810 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003816:	f107 0308 	add.w	r3, r7, #8
 800381a:	2218      	movs	r2, #24
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fbec 	bl	8003ffc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003824:	233f      	movs	r3, #63	; 0x3f
 8003826:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8003828:	f240 1301 	movw	r3, #257	; 0x101
 800382c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003832:	2301      	movs	r3, #1
 8003834:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8003836:	f107 0308 	add.w	r3, r7, #8
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f000 f97b 	bl	8003b38 <hci_send_req>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	da01      	bge.n	800384c <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8003848:	23ff      	movs	r3, #255	; 0xff
 800384a:	e000      	b.n	800384e <aci_gatt_init+0x3e>

  return status;
 800384c:	79fb      	ldrb	r3, [r7, #7]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b0ca      	sub	sp, #296	; 0x128
 800385a:	af00      	add	r7, sp, #0
 800385c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003860:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800386a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800386e:	4602      	mov	r2, r0
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003876:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 800387a:	460a      	mov	r2, r1
 800387c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8003884:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003888:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2bff      	cmp	r3, #255	; 0xff
 8003890:	d101      	bne.n	8003896 <aci_hal_write_config_data+0x40>
    return BLE_STATUS_INVALID_PARAMS;
 8003892:	2342      	movs	r3, #66	; 0x42
 8003894:	e065      	b.n	8003962 <aci_hal_write_config_data+0x10c>

  buffer[indx] = offset;
 8003896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800389a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800389e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80038a2:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80038a6:	f2a1 1121 	subw	r1, r1, #289	; 0x121
 80038aa:	7809      	ldrb	r1, [r1, #0]
 80038ac:	54d1      	strb	r1, [r2, r3]
  indx++;
 80038ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038b2:	3301      	adds	r3, #1
 80038b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = len;
 80038b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038bc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80038c0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80038c4:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80038c8:	f5a1 7191 	sub.w	r1, r1, #290	; 0x122
 80038cc:	7809      	ldrb	r1, [r1, #0]
 80038ce:	54d1      	strb	r1, [r2, r3]
  indx++;
 80038d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038d4:	3301      	adds	r3, #1
 80038d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        
  BLUENRG_memcpy(buffer + indx, val, len);
 80038da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038de:	f107 0208 	add.w	r2, r7, #8
 80038e2:	18d0      	adds	r0, r2, r3
 80038e4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80038e8:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80038ec:	781a      	ldrb	r2, [r3, #0]
 80038ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80038f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	f000 fb72 	bl	8003fe0 <memcpy>
  indx +=  len;
 80038fc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003900:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8003904:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	4413      	add	r3, r2
 800390c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003910:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003914:	2218      	movs	r2, #24
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fb6f 	bl	8003ffc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800391e:	233f      	movs	r3, #63	; 0x3f
 8003920:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8003924:	230c      	movs	r3, #12
 8003926:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  rq.cparam = (void *)buffer;
 800392a:	f107 0308 	add.w	r3, r7, #8
 800392e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.clen = indx;
 8003932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003936:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.rparam = &status;
 800393a:	f207 130b 	addw	r3, r7, #267	; 0x10b
 800393e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rlen = 1;
 8003942:	2301      	movs	r3, #1
 8003944:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

  if (hci_send_req(&rq, FALSE) < 0)
 8003948:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f8f2 	bl	8003b38 <hci_send_req>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	da01      	bge.n	800395e <aci_hal_write_config_data+0x108>
    return BLE_STATUS_TIMEOUT;
 800395a:	23ff      	movs	r3, #255	; 0xff
 800395c:	e001      	b.n	8003962 <aci_hal_write_config_data+0x10c>

  return status;
 800395e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
}
 8003962:	4618      	mov	r0, r3
 8003964:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	460a      	mov	r2, r1
 8003976:	71fb      	strb	r3, [r7, #7]
 8003978:	4613      	mov	r3, r2
 800397a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8003980:	79bb      	ldrb	r3, [r7, #6]
 8003982:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003984:	f107 0310 	add.w	r3, r7, #16
 8003988:	2218      	movs	r2, #24
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fb35 	bl	8003ffc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003992:	233f      	movs	r3, #63	; 0x3f
 8003994:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8003996:	230f      	movs	r3, #15
 8003998:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800399a:	f107 030c 	add.w	r3, r7, #12
 800399e:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80039a0:	2302      	movs	r3, #2
 80039a2:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 80039a4:	f107 030b 	add.w	r3, r7, #11
 80039a8:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 80039aa:	2301      	movs	r3, #1
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 80039ae:	f107 0310 	add.w	r3, r7, #16
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f8bf 	bl	8003b38 <hci_send_req>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	da01      	bge.n	80039c4 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 80039c0:	23ff      	movs	r3, #255	; 0xff
 80039c2:	e000      	b.n	80039c6 <aci_hal_set_tx_power_level+0x5a>

  return status;
 80039c4:	7afb      	ldrb	r3, [r7, #11]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3728      	adds	r7, #40	; 0x28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b0c7      	sub	sp, #284	; 0x11c
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80039e0:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80039ea:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80039ee:	4622      	mov	r2, r4
 80039f0:	801a      	strh	r2, [r3, #0]
 80039f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80039f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80039fa:	4602      	mov	r2, r0
 80039fc:	801a      	strh	r2, [r3, #0]
 80039fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a02:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8003a06:	460a      	mov	r2, r1
 8003a08:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8003a0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a1a:	b21a      	sxth	r2, r3
 8003a1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a20:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	029b      	lsls	r3, r3, #10
 8003a28:	b21b      	sxth	r3, r3
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	b21b      	sxth	r3, r3
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a38:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 8003a3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a42:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003a46:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8003a4a:	7812      	ldrb	r2, [r2, #0]
 8003a4c:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 8003a4e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a52:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003a5a:	f107 0318 	add.w	r3, r7, #24
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003a64:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003a68:	8811      	ldrh	r1, [r2, #0]
 8003a6a:	7892      	ldrb	r2, [r2, #2]
 8003a6c:	8019      	strh	r1, [r3, #0]
 8003a6e:	709a      	strb	r2, [r3, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003a70:	f107 0318 	add.w	r3, r7, #24
 8003a74:	3304      	adds	r3, #4
 8003a76:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003a7a:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8003a7e:	7812      	ldrb	r2, [r2, #0]
 8003a80:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8003a84:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8003a88:	6809      	ldr	r1, [r1, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 faa8 	bl	8003fe0 <memcpy>
  
  if (hciContext.io.Send)
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <send_cmd+0xf0>)
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <send_cmd+0xe4>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <send_cmd+0xf0>)
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003aa0:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8003aa4:	7812      	ldrb	r2, [r2, #0]
 8003aa6:	b292      	uxth	r2, r2
 8003aa8:	3204      	adds	r2, #4
 8003aaa:	b291      	uxth	r1, r2
 8003aac:	f107 0218 	add.w	r2, r7, #24
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4798      	blx	r3
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd90      	pop	{r4, r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000138 	.word	0x20000138

08003ac4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8003ace:	e00a      	b.n	8003ae6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6838      	ldr	r0, [r7, #0]
 8003ad8:	f000 fa0e 	bl	8003ef8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f975 	bl	8003dd0 <list_insert_head>
  while (!list_is_empty(src_list))
 8003ae6:	6838      	ldr	r0, [r7, #0]
 8003ae8:	f000 f950 	bl	8003d8c <list_is_empty>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0ee      	beq.n	8003ad0 <move_list+0xc>
  }
}
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003b02:	e009      	b.n	8003b18 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003b04:	1d3b      	adds	r3, r7, #4
 8003b06:	4619      	mov	r1, r3
 8003b08:	4809      	ldr	r0, [pc, #36]	; (8003b30 <free_event_list+0x34>)
 8003b0a:	f000 f9ce 	bl	8003eaa <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4619      	mov	r1, r3
 8003b12:	4808      	ldr	r0, [pc, #32]	; (8003b34 <free_event_list+0x38>)
 8003b14:	f000 f982 	bl	8003e1c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003b18:	4806      	ldr	r0, [pc, #24]	; (8003b34 <free_event_list+0x38>)
 8003b1a:	f000 fa14 	bl	8003f46 <list_get_size>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	ddef      	ble.n	8003b04 <free_event_list+0x8>
  }
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000130 	.word	0x20000130
 8003b34:	20000128 	.word	0x20000128

08003b38 <hci_send_req>:
  hciContext.io.GetTick = fops->GetTick;
  hciContext.io.Reset   = fops->Reset;
}

int hci_send_req(struct hci_request* r, BOOL async)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08e      	sub	sp, #56	; 0x38
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	885b      	ldrh	r3, [r3, #2]
 8003b48:	b21b      	sxth	r3, r3
 8003b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b4e:	b21a      	sxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	029b      	lsls	r3, r3, #10
 8003b56:	b21b      	sxth	r3, r3
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	b21b      	sxth	r3, r3
 8003b5c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8003b62:	f107 0308 	add.w	r3, r7, #8
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f900 	bl	8003d6c <list_init_head>

  free_event_list();
 8003b6c:	f7ff ffc6 	bl	8003afc <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8818      	ldrh	r0, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8859      	ldrh	r1, [r3, #2]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f7ff ff25 	bl	80039d0 <send_cmd>
  
  if (async)
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <hci_send_req+0x58>
  {
    return 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e0e5      	b.n	8003d5c <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8003b90:	f7fd f896 	bl	8000cc0 <HAL_GetTick>
 8003b94:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003b96:	f7fd f893 	bl	8000cc0 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba4:	f200 80b6 	bhi.w	8003d14 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003ba8:	486e      	ldr	r0, [pc, #440]	; (8003d64 <hci_send_req+0x22c>)
 8003baa:	f000 f8ef 	bl	8003d8c <list_is_empty>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d000      	beq.n	8003bb6 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003bb4:	e7ef      	b.n	8003b96 <hci_send_req+0x5e>
      {
        break;
 8003bb6:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8003bb8:	f107 0310 	add.w	r3, r7, #16
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4869      	ldr	r0, [pc, #420]	; (8003d64 <hci_send_req+0x22c>)
 8003bc0:	f000 f973 	bl	8003eaa <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d17b      	bne.n	8003cca <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	3308      	adds	r3, #8
 8003bdc:	3303      	adds	r3, #3
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8003be6:	3b03      	subs	r3, #3
 8003be8:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b3e      	cmp	r3, #62	; 0x3e
 8003bf0:	d04d      	beq.n	8003c8e <hci_send_req+0x156>
 8003bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8003bf4:	dc6b      	bgt.n	8003cce <hci_send_req+0x196>
 8003bf6:	2b10      	cmp	r3, #16
 8003bf8:	f000 808e 	beq.w	8003d18 <hci_send_req+0x1e0>
 8003bfc:	2b10      	cmp	r3, #16
 8003bfe:	dc66      	bgt.n	8003cce <hci_send_req+0x196>
 8003c00:	2b0e      	cmp	r3, #14
 8003c02:	d024      	beq.n	8003c4e <hci_send_req+0x116>
 8003c04:	2b0f      	cmp	r3, #15
 8003c06:	d162      	bne.n	8003cce <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	885b      	ldrh	r3, [r3, #2]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003c14:	429a      	cmp	r2, r3
 8003c16:	f040 8081 	bne.w	8003d1c <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b0f      	cmp	r3, #15
 8003c20:	d004      	beq.n	8003c2c <hci_send_req+0xf4>
          if (cs->status) {
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d053      	beq.n	8003cd2 <hci_send_req+0x19a>
            goto failed;
 8003c2a:	e07a      	b.n	8003d22 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	bf28      	it	cs
 8003c36:	461a      	movcs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6918      	ldr	r0, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	461a      	mov	r2, r3
 8003c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c48:	f000 f9ca 	bl	8003fe0 <memcpy>
        goto done;
 8003c4c:	e07a      	b.n	8003d44 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d15f      	bne.n	8003d20 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	3303      	adds	r3, #3
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	3b03      	subs	r3, #3
 8003c6a:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	bf28      	it	cs
 8003c76:	461a      	movcs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6918      	ldr	r0, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	461a      	mov	r2, r3
 8003c86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c88:	f000 f9aa 	bl	8003fe0 <memcpy>
        goto done;
 8003c8c:	e05a      	b.n	8003d44 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d11a      	bne.n	8003cd6 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	bf28      	it	cs
 8003cb0:	461a      	movcs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6918      	ldr	r0, [r3, #16]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	1c59      	adds	r1, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f000 f98c 	bl	8003fe0 <memcpy>
        goto done;
 8003cc8:	e03c      	b.n	8003d44 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8003cca:	bf00      	nop
 8003ccc:	e004      	b.n	8003cd8 <hci_send_req+0x1a0>
        break;
 8003cce:	bf00      	nop
 8003cd0:	e002      	b.n	8003cd8 <hci_send_req+0x1a0>
          break;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <hci_send_req+0x1a0>
          break;
 8003cd6:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8003cd8:	4823      	ldr	r0, [pc, #140]	; (8003d68 <hci_send_req+0x230>)
 8003cda:	f000 f857 	bl	8003d8c <list_is_empty>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00d      	beq.n	8003d00 <hci_send_req+0x1c8>
 8003ce4:	481f      	ldr	r0, [pc, #124]	; (8003d64 <hci_send_req+0x22c>)
 8003ce6:	f000 f851 	bl	8003d8c <list_is_empty>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	481c      	ldr	r0, [pc, #112]	; (8003d68 <hci_send_req+0x230>)
 8003cf6:	f000 f891 	bl	8003e1c <list_insert_tail>
      hciReadPacket=NULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	e008      	b.n	8003d12 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	f107 0308 	add.w	r3, r7, #8
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 f887 	bl	8003e1c <list_insert_tail>
      hciReadPacket=NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
  {
 8003d12:	e73d      	b.n	8003b90 <hci_send_req+0x58>
        goto failed;
 8003d14:	bf00      	nop
 8003d16:	e004      	b.n	8003d22 <hci_send_req+0x1ea>
        goto failed;
 8003d18:	bf00      	nop
 8003d1a:	e002      	b.n	8003d22 <hci_send_req+0x1ea>
          goto failed;
 8003d1c:	bf00      	nop
 8003d1e:	e000      	b.n	8003d22 <hci_send_req+0x1ea>
          goto failed;
 8003d20:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	480e      	ldr	r0, [pc, #56]	; (8003d68 <hci_send_req+0x230>)
 8003d2e:	f000 f84f 	bl	8003dd0 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003d32:	f107 0308 	add.w	r3, r7, #8
 8003d36:	4619      	mov	r1, r3
 8003d38:	480a      	ldr	r0, [pc, #40]	; (8003d64 <hci_send_req+0x22c>)
 8003d3a:	f7ff fec3 	bl	8003ac4 <move_list>

  return -1;
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d42:	e00b      	b.n	8003d5c <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4619      	mov	r1, r3
 8003d48:	4807      	ldr	r0, [pc, #28]	; (8003d68 <hci_send_req+0x230>)
 8003d4a:	f000 f841 	bl	8003dd0 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003d4e:	f107 0308 	add.w	r3, r7, #8
 8003d52:	4619      	mov	r1, r3
 8003d54:	4803      	ldr	r0, [pc, #12]	; (8003d64 <hci_send_req+0x22c>)
 8003d56:	f7ff feb5 	bl	8003ac4 <move_list>

  return 0;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3738      	adds	r7, #56	; 0x38
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000130 	.word	0x20000130
 8003d68:	20000128 	.word	0x20000128

08003d6c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	605a      	str	r2, [r3, #4]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d94:	f3ef 8310 	mrs	r3, PRIMASK
 8003d98:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003d9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d9e:	b672      	cpsid	i
}
 8003da0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d102      	bne.n	8003db2 <list_is_empty+0x26>
  {
    return_value = 1;
 8003dac:	2301      	movs	r3, #1
 8003dae:	75fb      	strb	r3, [r7, #23]
 8003db0:	e001      	b.n	8003db6 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	75fb      	strb	r3, [r7, #23]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f383 8810 	msr	PRIMASK, r3
}
 8003dc0:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8003dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dda:	f3ef 8310 	mrs	r3, PRIMASK
 8003dde:	60fb      	str	r3, [r7, #12]
  return(result);
 8003de0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003de2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003de4:	b672      	cpsid	i
}
 8003de6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f383 8810 	msr	PRIMASK, r3
}
 8003e0e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e26:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003e2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e30:	b672      	cpsid	i
}
 8003e32:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f383 8810 	msr	PRIMASK, r3
}
 8003e5a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003e5c:	bf00      	nop
 8003e5e:	371c      	adds	r7, #28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e70:	f3ef 8310 	mrs	r3, PRIMASK
 8003e74:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e76:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003e78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e7a:	b672      	cpsid	i
}
 8003e7c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6852      	ldr	r2, [r2, #4]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f383 8810 	msr	PRIMASK, r3
}
 8003e9c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eba:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003ebc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ebe:	b672      	cpsid	i
}
 8003ec0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ffca 	bl	8003e68 <list_remove_node>
  (*node)->next = NULL;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f383 8810 	msr	PRIMASK, r3
}
 8003eee:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003ef0:	bf00      	nop
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f02:	f3ef 8310 	mrs	r3, PRIMASK
 8003f06:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f08:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003f0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f0c:	b672      	cpsid	i
}
 8003f0e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ffa3 	bl	8003e68 <list_remove_node>
  (*node)->next = NULL;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f383 8810 	msr	PRIMASK, r3
}
 8003f3c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b089      	sub	sp, #36	; 0x24
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  int size = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f52:	f3ef 8310 	mrs	r3, PRIMASK
 8003f56:	613b      	str	r3, [r7, #16]
  return(result);
 8003f58:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003f5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f5c:	b672      	cpsid	i
}
 8003f5e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8003f66:	e005      	b.n	8003f74 <list_get_size+0x2e>
  {
    size++;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d1f5      	bne.n	8003f68 <list_get_size+0x22>
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f383 8810 	msr	PRIMASK, r3
}
 8003f86:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8003f88:	69fb      	ldr	r3, [r7, #28]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3724      	adds	r7, #36	; 0x24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <__libc_init_array>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	4d0d      	ldr	r5, [pc, #52]	; (8003fd0 <__libc_init_array+0x38>)
 8003f9c:	4c0d      	ldr	r4, [pc, #52]	; (8003fd4 <__libc_init_array+0x3c>)
 8003f9e:	1b64      	subs	r4, r4, r5
 8003fa0:	10a4      	asrs	r4, r4, #2
 8003fa2:	2600      	movs	r6, #0
 8003fa4:	42a6      	cmp	r6, r4
 8003fa6:	d109      	bne.n	8003fbc <__libc_init_array+0x24>
 8003fa8:	4d0b      	ldr	r5, [pc, #44]	; (8003fd8 <__libc_init_array+0x40>)
 8003faa:	4c0c      	ldr	r4, [pc, #48]	; (8003fdc <__libc_init_array+0x44>)
 8003fac:	f000 f82e 	bl	800400c <_init>
 8003fb0:	1b64      	subs	r4, r4, r5
 8003fb2:	10a4      	asrs	r4, r4, #2
 8003fb4:	2600      	movs	r6, #0
 8003fb6:	42a6      	cmp	r6, r4
 8003fb8:	d105      	bne.n	8003fc6 <__libc_init_array+0x2e>
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
 8003fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc0:	4798      	blx	r3
 8003fc2:	3601      	adds	r6, #1
 8003fc4:	e7ee      	b.n	8003fa4 <__libc_init_array+0xc>
 8003fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fca:	4798      	blx	r3
 8003fcc:	3601      	adds	r6, #1
 8003fce:	e7f2      	b.n	8003fb6 <__libc_init_array+0x1e>
 8003fd0:	08004074 	.word	0x08004074
 8003fd4:	08004074 	.word	0x08004074
 8003fd8:	08004074 	.word	0x08004074
 8003fdc:	08004078 	.word	0x08004078

08003fe0 <memcpy>:
 8003fe0:	440a      	add	r2, r1
 8003fe2:	4291      	cmp	r1, r2
 8003fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fe8:	d100      	bne.n	8003fec <memcpy+0xc>
 8003fea:	4770      	bx	lr
 8003fec:	b510      	push	{r4, lr}
 8003fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ff6:	4291      	cmp	r1, r2
 8003ff8:	d1f9      	bne.n	8003fee <memcpy+0xe>
 8003ffa:	bd10      	pop	{r4, pc}

08003ffc <memset>:
 8003ffc:	4402      	add	r2, r0
 8003ffe:	4603      	mov	r3, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	f803 1b01 	strb.w	r1, [r3], #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <_init>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	bf00      	nop
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr

08004018 <_fini>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	bf00      	nop
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr
